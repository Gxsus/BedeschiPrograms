# IMPORTS
from math import pi, tan, asin, cos, sin, acos, ceil

data = \
{
	'Input Data': {
		'C2': [None, '-', 'Material'],
		'C3': [None, 'r [t/m3]', 'Bulk density'],
		'C4': [None, 'f [°]', 'Repose angle'],
		'C5': [None, 'materials[data["Input Data"]["C2"][0]'],
		'C6': [None, 'Q [t/h]', 'Nominal Required Capacity[0]'],
		'C7': [None, 'data["Input Data"]["C6"][0] / data["Input Data"]["C3"][0] / 3600'],
		'C8': [None, 'D [m]', 'Diameter (on cutting edge)'],
		'C9': [None, 'wBW [rpm]', 'Bucket wheel rotational speed'],
		'C10': [None, 'z', 'Number of buckets'],
		'C11': [None, 'Vb [m3] ', 'Bucket volume'],
		'C12': [None, 'tE [m]', 'Bucket height'],
		'C13': [None, 'bE [m]', 'Bucket width'],
		'C14': [None, '1.24 * pi / 4 * data["Input Data"]["C12"][0] ** 2 * data["Input Data"]["C13"][0]'],
		'C15': [None, 'θ [°]', 'Angle in which bucket discharge starts, measured from vert'],
		'C16': [None, 'm ', 'Efficiency of Drive (Coupling+Motor+Gearbox)'],
		'C17': [None, 'f', 'Bucket Efficiency (filling factor)'],
		'C18': [None, 'data["Input Data"]["C17"][0] * data["Input Data"]["C3"][0] * data["Input Data"]["C11"][0] * data["Input Data"]["C65"][0] * 3600'],
		'C19': [None, 'data["Input Data"]["C18"][0] / data["Input Data"]["C3"][0] / 3600'],
		'C20': [None, 'Lb [m]', 'Boom Lenght'],
		'C21': [None, 'HL [m]', 'Height of boom hinge from bottom of yard'],
		'C22': [None, 'l [m]', 'Distance of boom hinge from slewing axle'],
		'C23': [None, 'h  [m]', 'Height of BW axle from boom hinge (with boom horizontal)'],
		'C24': [None, 'd [m]', 'Distance between pile CL and slewing axle'],
		'C25': [None, 'vSmax  [m/min]', 'Maximum selected boom slewing speed'],
		'C26': [None, 'Hp [m]', 'Stockpile height'],
		'C27': [None, 'Bp [m]', 'Bottom stockpile width'],
		'C28': [None, 'Lp [m]', 'Stockpile lenght (of the full stockpile section)'],
		'C29': [None, 'data["Input Data"]["C27"][0] - 2 * data["Input Data"]["C26"][0] / tan(data["Input Data"]["C47"][0])'],
		'C30': [None, 'asin((data["Input Data"]["C24"][0] - data["Input Data"]["C27"][0] / 2) / data["Input Data"]["C55"][0][0])'],
		'C31': [None, 'data["Input Data"]["C30"][0] * 180 / pi'],
		'C32': [None, 'data["Input Data"]["C31"][0][0]'],
		'C33': [None, 'pi / 2 if (data["Input Data"]["C24"][0] + data["Input Data"]["C27"][0] / 2) / data["Input Data"]["C55"][0][0] < 1 else asin((data["Input Data"]["C24"][0] + data["Input Data"]["C27"][0] / 2) / data["Input Data"]["C55"][0][0])'],
		'C34': [None, 'data["Input Data"]["C33"][0] * 180 / pi'],
		'C35': [None, 'ymax [°]', 'Selected Maximum angle of Reclaiming (in plant view)'],
		'C36': [None, 'a1 [°/s2]', 'Slewing acceleration[0]'],
		'C37': [None, 'data["Input Data"]["C36"][0] * pi / 180'],
		'C38': [None, 'a2 [°/s2]', 'Slewing deceleration[0]'],
		'C39': [None, 'data["Input Data"]["C38"][0] * pi / 180'],
		'C40': [None, 'data["Input Data"]["Stockpile height"] / data["Input Data"]["C8"][0] * 2'],
		'C41': [None, '-', 'Number of selected benches'],
		'C42': [None, 'data["Input Data"]["C12"][0] / cos(data["Input Data"]["C75"][0])'],
		'C43': [None, 'p [m]', 'Selected Step of Reclaiming[0]'],
		'C44': [None, 'data["Input Data"]["C15"][0]'],
		'C46': [None, 'materials[data["Input Data"]["C2"][0]][1]'],
		'C47': [None, 'data["Input Data"]["C4"][0] * pi / 180'],
		'C48': [None, 'materials[data["Input Data"]["C2"][0]][0]'],
		'C51': [None, 'data["Input Data"]["C52"][0] * 180 / pi'],
		'C52': [None, 'asin((0.98 * data["Input Data"]["C23"][0] + data["Input Data"]["C21"][0] - data["Input Data"]["C8"][0] / 2) / data["Input Data"]["C20"][0] '],
		'C53': [None, 'data["Input Data"]["Maximum luffing angle"][0] * 180 / pi'],
		'C54': [None, 'asin((data["Input Data"]["C26"][0] - data["Input Data"]["C21"][0] - 0.985 *  data["Input Data"]["C23"][0] + data["Input Data"]["C8"][0] / 2) / data["Input Data"]["C20"][0]) '],
		'C55': [None, 'data["Input Data"]["C22"][0] + data["Input Data"]["C20"][0] * cos(data["Input Data"]["C52"][0]) + data["Input Data"]["C23"][0] * sin(data["Input Data"]["C52"][0]) + data["Input Data"]["C8"][0] / 2 * sin(data["Input Data"]["C47"][0])'],
		'C57': [None, 'data["Input Data"]["C6"][0] / data["Input Data"]["C3"][0] / data["Input Data"]["C17"][0]'],
		'C58': [None, 'data["Input Data"]["C9"][0] * 2 * pi / 60'],
		'C59': [None, 'data["Input Data"]["Rotational speed"][0] * data["Input Data"]["C8"][0] / 2'],
		'C60': [None, 'data["Input Data"]["C59"][0] * 60'],
		'C61': [None, '2 * pi  / data["Input Data"]["C10"][0]'],
		'C62': [None, '360 / data["Input Data"]["C10"][0]'],
		'C63': [None, '60 / data["Input Data"]["C9"][0] / data["Input Data"]["C10"][0]'],
		'C64': [None, 'data["Input Data"]["C9"][0] * data["Input Data"]["C10"][0]'],
		'C65': [None, 'data["Input Data"]["C64"][0] / 60'],
		'C66': [None, '3.14 * data["Input Data"]["C8"][0] / data["Input Data"]["C10"][0]'],
		'C67': [None, 'data["Input Data"]["C25"][0] / 60'],
		'C68': [None, 'data["Input Data"]["C70"][0] * data["Input Data"]["C69"][0]'],
		'C69': [None, 'data["Input Data"]["C20"][0] + data["Input Data"]["C8"][0] / 2 * sin(data["Input Data"]["C5"][0]) + data["Input Data"]["C22"][0]'],
		'C70': [None, 'data["Input Data"]["C11"][0] * data["Input Data"]["C17"][0] * data["Input Data"]["C65"][0] / data["Input Data"]["C43"][0] / (data["Input Data"]["C26"][0] / data["Input Data"]["C41"][0]) / data["Input Data"]["C55"][0][0]'],
		'C71': [None, 'data["Input Data"]["C70"][0] / 60 / 6.28'],
		'C72': [None, 'data["Input Data"]["C67"][0] / data["Input Data"]["C69"][0]'],
		'C73': [None, 'data["Input Data"]["C72"][0] * 60 / 6.28'],
		'C74': [None, 'data["Input Data"]["C32"][0] * pi / 180'],
		'C75': [None, ' data["Input Data"]["C35"][0] * pi / 180'],
		'C78': [None, 'data["Input Data"]["C79"][0] * 180 / pi'],
		'C79': [None, 'acos(data["Input Data"]["C70"][0] / data["Input Data"]["C72"][0])'],
		'C80': [None, 'data["Input Data"]["C26"][0] / data["Input Data"]["C41"][0]'],
		'C81': [None, 'data["Input Data"]["Scarp angle"][0] / data["Input Data"]["C61"][0]'],
		'C82': [None, 'ceil(data["Input Data"]["C81"][0])'],
		'C84': [None, '0'],
		'C85': [None, 'data["Input Data"]["C62"][0] if data["Input Data"]["C82"][0] >=2 else "n.a."'],
		'C86': [None, 'data["Input Data"]["C62"][0] * 2 if data["Input Data"]["C82"][0] >=3 else "n.a."'],
		'C87': [None, 'data["Input Data"]["C62"][0] * 3 if data["Input Data"]["C82"][0] >=4 else "n.a."'],
		'J4': [None, 'acos(data["Input Data"]["C8"][0] / 2 - data["Input Data"]["C80"][0]) / (data["Input Data"]["C8"][0] / 2) if data["Input Data"]["C8"][0] >= data["Input Data"]["C80"][0] else pi / 2 + asin((data["Input Data"]["C80"][0] - data["Input Data"]["C8"][0] / 2) / (data["Input Data"]["C8"][0] / 2)) '],
		'J5': [None, 'data["Input Data"]["J4"][0] * 180 / pi'],
		'K5': [None, '"ok" if data["Input Data"]["J5"][0] <110 and if data["Input Data"]["J5"][0] < 720 / data["Input Data"]["C10"][0] else "verify"'],
		'J6': [None, 'data["Input Data"]["C59"][0] / (data["Input Data"]["C8"][0] / 2 * 9.81) ** (1 / 2)'],
		'K6': [None, '"ok" if 0.2<data["Input Data"]["J6"][0]<0.7 else "verify"'],
		'J7': [None, '(9.81 * data["Input Data"]["C8"][0] / 2) ** 0.5'],
		'J8': [None, 'data["Input Data"]["C59"][0] / data["Input Data"]["J7"][0]'],
		'K8': [None, '"BW speed increasable" if data["Input Data"]["J8"][0] < 0.5 else "it is necessary to decrease BW speed" if data["Input Data"]["J8"][0] > 0.6 else "ok, value between 0,5-0,6"'],
		'J9': [None, 'data["Input Data"]["C57"][0] / 3600 / data["Input Data"]["C65"][0]'],
		'K9': [None, '"ok" if data["Input Data"]["C11"][0] > data["Input Data"]["J9"][0] / data["Input Data"]["C17"][0] else "verify"'],
		'J10': [None, 'data["Input Data"]["C17"][0] * data["Input Data"]["C10"][0] * data["Input Data"]["C11"][0]'],
		'J11': [None, 'data["Input Data"]["C11"][0] ** (1/3) / data["Input Data"]["C66"][0]'],
		'K11': [None, '"ok" if 0.24 < data["Input Data"]["J11"][0] < 0.4 else "verify" '],
		'J12': [None, 'data["Input Data"]["C26"][0] / data["Input Data"]["C8"][0] * 2'],
		'J13': [None, 'data["Input Data"]["C80"][0] / data["Input Data"]["C8"][0] * 2'],
		'K13': [None, '"ok" if 1 < data["Input Data"]["J13"][0] < 1.44 else "verify"'],
		'J14': [None, 'data["Input Data"]["C43"][0] * cos(data["Input Data"]["C75"][0]) * sin(data["Input Data"]["C46"][0])'],
		'K14': [None, '"ok" if data["Input Data"]["C12"][0] > data["Input Data"]["J14"][0] else "verify"'],
		'J15': [None, 'data["Input Data"]["C67"][0] / data["Input Data"]["C65"][0]'],
		'K15': [None, '"ok" if data["Input Data"]["C13"][0] >= data["Input Data"]["J15"][0] else "verify"'],
	},
	'PRINT': {
		'K48': [None, 'data["Input Data"]["C6"][0]'],
		'J52': [None, 'data["Input Data"]["C2"][0]'],
		'M52': [None, 'data["Input Data"]["C3"][0]'],
		'O98': [None, 'data["Input Data"]["C6"][0]'],
		'L101': [None, 'data["Input Data"]["C2"][0]'],
		'O102': [None, 'data["Input Data"]["C3"][0]'],
		'O103': [None, 'data["Input Data"]["C4"][0]'],
		'O104': [None, 'data["Input Data"]["C5"][0]'],
		'O108': [None, 'data["Input Data"]["C27"][0]'],
		'O109': [None, 'data["Input Data"]["C26"][0]'],
		'O110': [None, 'data["Input Data"]["C29"][0]'],
		'O111': [None, 'data["Input Data"]["C28"][0]'],
		'O115': [None, 'data["Input Data"]["C8"][0]'],
		'O116': [None, 'data["Input Data"]["C10"][0]'],
		'O118': [None, 'data["Input Data"]["C12"][0]'],
		'O117': [None, 'data["Input Data"]["C11"][0]'],
		'O119': [None, 'data["Input Data"]["C13"][0]'],
		'O120': [None, 'data["Input Data"]["C9"][0]'],
		'O121': [None, 'data["Input Data"]["C16"][0]'],
		'O122': [None, 'data["Input Data"]["C17"][0]'],
		'O123': [None, 'data["Input Data"]["C18"][0]'],
		'O124': [None, 'data["Input Data"]["J6"][0]'],
		'O125': [None, 'data["Input Data"]["C64"][0]'],
		'O129': [None, 'data["Input Data"]["C20"][0]'],
		'O130': [None, 'data["Input Data"]["C24"][0]'],
		'O131': [None, 'data["Input Data"]["C21"][0]'],
	},
}

# for the materials I don't use a dictionary of list because the values are constants, so is better to use a tuple
materials = \
{
	'ore': (22.7456, 0.4, 35, 0.4),
	'coal': (8.743, 0.35, None, 0.35),
	'pellet': (13.1194, 0.3, (30, 44), 0.35),
	'coke': (17.4959, 0.25, None, 0.25),
    'limestone': (17.4959, 0.5, (30, 44), 0.5)
}
